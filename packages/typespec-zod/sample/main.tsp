import "@typespec/http";
import "@typespec/rest";
import "@typespec/openapi3";
import "@typespec/openapi";
import "@typespec/json-schema";
using Http;
using JsonSchema;


@service({
  title: "Todo App",
})
@useAuth(BearerAuth | ApiKeyAuth<ApiKeyLocation.cookie, "session-id">)
@jsonSchema
namespace Todo;

enum TodoStatus {
  NotStarted,
  InProgress,
  Completed,
}

enum TodoOwners{
  Alice: "Alice",
  Bob: "Bob",
  Charlie: "Charlie",
}

enum TodoDogNames {
  "Fido",
  "Rover",
  "Spot",
}

enum TodoLabelColor {
  Red : 0xff0000,
  Green: 0x00ff00,
  Blue: 0x0000ff,
}

enum Score {
  A:90,
  B:80,
  C:70,
  D :60,
  F:50,
}

enum InterestingNumbers {
  Pi:3.14159,
  E:2.71828,
  Avagadro:6.022e23,
}

@minLength(1)
@maxLength(50)
scalar string50 extends string;

@jsonSchema
model TodoLabelRecord {
  name: string;

  @pattern("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$")
  color?: string;
}

@jsonSchema
model TodoItem {
  /** The item's unique id */
  @visibility("read") @key id: safeint;

  /** The item's title */
  @maxLength(255)
  title: string;

  /** User that created the todo */
  @visibility("read") createdBy: User.id;

  /** User that the todo is assigned to */
  assignedTo?: User.id;

  /** A longer description of the todo item in markdown format */
  description?: string;

  /** The status of the todo item */
  status: "NotStarted" | "InProgress" | "Completed";

  /** When the todo item was created. */
  @visibility("read") createdAt: utcDateTime;

  /** When the todo item was last updated */
  @visibility("read") updatedAt: utcDateTime;

  /** When the todo item was marked as completed */
  @visibility("read") completedAt?: utcDateTime;

  // Want the read form to be normalized to TodoLabelRecord[], but can't
  // https://github.com/microsoft/typespec/issues/2926
  labels?: TodoLabels;

  // hack to get a different schema for create
  // (fastify glue doesn't support readonly)
  @visibility("create") _dummy?: string;
}

@jsonSchema
model User {
  items?: TodoItem[];
  xRef?: TodoItem.title;
  nullableOptionalValue?: string50 | url | null;
  constrainedScalar: string50;
  anotherItem?: TodoItem;

  myPetRecord: Record<integer>;
    
  constrained_array: string50[];

  petRecord: {
    name: string;
    age: int32;
  };

  /** An autogenerated unique id for the user */
  @key
  @visibility("read")
  id: safeint;

  /** The user's username */
  @minLength(2)
  @maxLength(50)
  username: string;
  
  /** The user's email address */
  // @format("email") - crashes emitters for now
  email: string;

  /**
   * The user's password, provided when creating a user
   * but is otherwise not visible (and hashed by the backend)
   */
  @visibility("create")
  password: string;

  /** Zod simple tests */
  boolean1: boolean;

  byte1: bytes;
  decimal1: decimal;
  decimal2: decimal128;
  duration1: duration;
  float1: float;
  float2: float32;
  float3: float64;
  int1: int8;
  int2: int16;
  int3: int32;
  int4: int64;
  offsetDateTime1: offsetDateTime;
  plainDate1: plainDate;
  plainTime1: plainTime;
  safeint1: safeint;
  uint1: uint8;
  uint2: uint16;
  uint3: uint32;
  uint4: uint64;
  url1: url;
  utcDateTime1: utcDateTime;
  numeric1: numeric;
  string1: string;


  /** Zod constrained tests */
  @minValue(5)
  @maxValue(10)
  int16_1: int16;

  @minValue(42)
  uint_1: uint8;

  @maxValue(10)
  float_1: float;

  @minValue(5)
  @maxValue(10)
  boundNumeric: numeric;

  stringArray1: string[];
  stringArray2: Array<string>;
  
  @minItems(1)
  intArray1: integer[];

  @maxItems(10)
  intArray2: Array<integer>;


  

  /** Whether the user is validated. Never visible to the API. */
  @visibility("none") validated: boolean;
}

@jsonSchema
union TodoLabels {
  string,
  string[],
  TodoLabelRecord,
  TodoLabelRecord[],
}

union TodoAttachment {
  file: TodoFileAttachment,
  url: TodoUrlAttachment,
}

@jsonSchema
model TodoUrlAttachment {
  /** A description of the URL */
  description: string;

  /** The url */
  url: url;
}

@jsonSchema
model TodoFileAttachment {
  /** The file name of the attachment */
  @maxLength(255)
  filename: string;

  /** The media type of the attachment */
  mediaType: string;

  /** The contents of the file */
  contents: bytes;
}

@jsonSchema
@error
model ApiError {
  /** A machine readable error code */
  code: string;

  /** A human readable message */
  // https://github.com/microsoft/OpenAPI/blob/main/extensions/x-ms-primary-error-message.md
  @OpenAPI.extension("x-ms-primary-error-message", true)
  message: string;
}

/**
 * Something is wrong with you.
 */
model Standard4XXResponse extends ApiError {
  @minValue(400)
  @maxValue(499)
  @statusCode
  statusCode: int32;
}

/**
 * Something is wrong with me.
 */
model Standard5XXResponse extends ApiError {
  @minValue(500)
  @maxValue(599)
  @statusCode
  statusCode: int32;
}

alias WithStandardErrors<T> = T | Standard4XXResponse | Standard5XXResponse;

@useAuth(NoAuth)
namespace Users {
  // would prefer to extend
  // https://github.com/microsoft/typespec/issues/2922

  model UserCreatedResponse {
    ...User;
    ...OkResponse;

    /** The token to use to construct the validate email address url */
    token: string;
  }

  /** The user already exists */
  model UserExistsResponse extends ApiError {
    ...ConflictResponse;
    code: "user-exists";
  }

  /** The user is invalid (e.g. forgot to enter email address) */
  model InvalidUserResponse extends ApiError {
    @statusCode statusCode: 422;
    code: "invalid-user";
  }

  @route("/users")
  @post
  op create(
    @body user: User,
  ): WithStandardErrors<UserCreatedResponse | UserExistsResponse | InvalidUserResponse>;
}

@route("items")
namespace TodoItems {
  model PaginationControls {
    /** The limit to the number of items */
    @query limit?: int32 = 50;

    /** The offset to start paginating at */
    @query offset?: int32 = 0;
  }

  model TodoPage {
    /** The items in the page */
    @pageItems items: TodoItem[];

    /** The number of items returned in this page */
    pageSize: int32;

    /** The total number of items */
    totalSize: int32;

    ...PaginationControls;

    /** A link to the previous page, if it exists */
    @prevLink
    prevLink?: url;

    /** A link to the next page, if it exists */
    @nextLink
    nextLink?: url;
  }

  // deeply annoying that I have to copy/paste this...
  model TodoItemPatch {
    /** The item's title */
    title?: TodoItem.title;

    /** User that the todo is assigned to */
    assignedTo?: TodoItem.assignedTo | null;

    /** A longer description of the todo item in markdown format */
    description?: TodoItem.description | null;

    /** The status of the todo item */
    status?: "NotStarted" | "InProgress" | "Completed";
  }

  model InvalidTodoItem extends ApiError {
    @statusCode statusCode: 422;
  }

  model Page<T> {
    @pageItems items: T[];
  }

  @list op list(...PaginationControls): WithStandardErrors<TodoPage>;

  @post
  op create(
    @header contentType: "application/json",
    item: TodoItem,
    attachments?: TodoAttachment[],
  ): WithStandardErrors<TodoItem | InvalidTodoItem>;

  @get op get(@path id: TodoItem.id): TodoItem | NotFoundResponse;
  @patch op update(
    @header contentType: "application/merge-patch+json",
    @path id: TodoItem.id,
    @body patch: TodoItemPatch,
  ): TodoItem;
  @delete op delete(
    @path id: TodoItem.id,
  ): WithStandardErrors<NoContentResponse | NotFoundResponse>;

  @route("{itemId}/attachments")
  namespace Attachments {
    @list op list(
      @path itemId: TodoItem.id,
    ): WithStandardErrors<Page<TodoAttachment> | NotFoundResponse>;

    @sharedRoute
    @post
    op createAttachment(
      @path itemId: TodoItem.id,
      @body contents: TodoAttachment,
    ): WithStandardErrors<NoContentResponse | NotFoundResponse>;
  }
}
